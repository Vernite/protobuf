/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: vernite.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export declare namespace tutorial {
    enum Kind {
        UPDATED = 0,
        DELETED = 1
    }
    class Person extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            name?: string;
            id?: number;
            email?: string;
            phones?: Person.PhoneNumber[];
        });
        get name(): string;
        set name(value: string);
        get id(): number;
        set id(value: number);
        get email(): string;
        set email(value: string);
        get phones(): Person.PhoneNumber[];
        set phones(value: Person.PhoneNumber[]);
        static fromObject(data: {
            name?: string;
            id?: number;
            email?: string;
            phones?: ReturnType<typeof Person.PhoneNumber.prototype.toObject>[];
        }): Person;
        toObject(): {
            name?: string;
            id?: number;
            email?: string;
            phones?: ReturnType<typeof Person.PhoneNumber.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Person;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Person;
    }
    namespace Person {
        enum PhoneType {
            MOBILE = 0,
            HOME = 1,
            WORK = 2
        }
        class PhoneNumber extends pb_1.Message {
            #private;
            constructor(data?: any[] | {
                number?: string;
                type?: Person.PhoneType;
            });
            get number(): string;
            set number(value: string);
            get type(): Person.PhoneType;
            set type(value: Person.PhoneType);
            static fromObject(data: {
                number?: string;
                type?: Person.PhoneType;
            }): PhoneNumber;
            toObject(): {
                number?: string;
                type?: Person.PhoneType;
            };
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PhoneNumber;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): PhoneNumber;
        }
    }
    class AddressBook extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            people?: Person[];
        });
        get people(): Person[];
        set people(value: Person[]);
        static fromObject(data: {
            people?: ReturnType<typeof Person.prototype.toObject>[];
        }): AddressBook;
        toObject(): {
            people?: ReturnType<typeof Person.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddressBook;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AddressBook;
    }
    class Author extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            name?: string;
            role?: string;
        });
        get name(): string;
        set name(value: string);
        get role(): string;
        set role(value: string);
        static fromObject(data: {
            name?: string;
            role?: string;
        }): Author;
        toObject(): {
            name?: string;
            role?: string;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Author;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Author;
    }
    class Change extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            kind?: Kind;
            patch?: string;
            tags?: string[];
            author?: Author;
        } & (({
            name?: string;
            id?: never;
        } | {
            name?: never;
            id?: string;
        }))));
        get kind(): Kind;
        set kind(value: Kind);
        get patch(): string;
        set patch(value: string);
        get tags(): string[];
        set tags(value: string[]);
        get name(): string;
        set name(value: string);
        get has_name(): boolean;
        get id(): string;
        set id(value: string);
        get has_id(): boolean;
        get author(): Author;
        set author(value: Author);
        get has_author(): boolean;
        get name_or_id(): "name" | "id" | "none";
        static fromObject(data: {
            kind?: Kind;
            patch?: string;
            tags?: string[];
            name?: string;
            id?: string;
            author?: ReturnType<typeof Author.prototype.toObject>;
        }): Change;
        toObject(): {
            kind?: Kind;
            patch?: string;
            tags?: string[];
            name?: string;
            id?: string;
            author?: ReturnType<typeof Author.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Change;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Change;
    }
}
//# sourceMappingURL=vernite.d.ts.map