var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _NewTaskNotification_one_of_decls;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: notifications/task.notification.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class NewTaskNotification extends pb_1.Message {
    constructor(data) {
        super();
        _NewTaskNotification_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _NewTaskNotification_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("taskId" in data && data.taskId != undefined) {
                this.taskId = data.taskId;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set name(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set createdAt(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get taskId() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set taskId(value) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data) {
        const message = new NewTaskNotification({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.taskId != null) {
            message.taskId = data.taskId;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.taskId != null) {
            data.taskId = this.taskId;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.createdAt.length)
            writer.writeString(2, this.createdAt);
        if (this.taskId != 0)
            writer.writeInt32(3, this.taskId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewTaskNotification();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.createdAt = reader.readString();
                    break;
                case 3:
                    message.taskId = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return NewTaskNotification.deserialize(bytes);
    }
}
_NewTaskNotification_one_of_decls = new WeakMap();
