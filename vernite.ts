/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: vernite.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/any";
import * as pb_1 from "google-protobuf";
export namespace vernite {
    export class CommunicatorModel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CommunicatorModel {
            const message = new CommunicatorModel({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommunicatorModel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommunicatorModel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): CommunicatorModel {
            return CommunicatorModel.deserialize(bytes);
        }
    }
    export namespace CommunicatorModel {
        export class Channel extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                name?: string;
                user?: string;
                channel?: boolean;
                team?: string;
                provider?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("user" in data && data.user != undefined) {
                        this.user = data.user;
                    }
                    if ("channel" in data && data.channel != undefined) {
                        this.channel = data.channel;
                    }
                    if ("team" in data && data.team != undefined) {
                        this.team = data.team;
                    }
                    if ("provider" in data && data.provider != undefined) {
                        this.provider = data.provider;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get user() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set user(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get channel() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set channel(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get team() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set team(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get provider() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set provider(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data: {
                id?: string;
                name?: string;
                user?: string;
                channel?: boolean;
                team?: string;
                provider?: string;
            }): Channel {
                const message = new Channel({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.user != null) {
                    message.user = data.user;
                }
                if (data.channel != null) {
                    message.channel = data.channel;
                }
                if (data.team != null) {
                    message.team = data.team;
                }
                if (data.provider != null) {
                    message.provider = data.provider;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    name?: string;
                    user?: string;
                    channel?: boolean;
                    team?: string;
                    provider?: string;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.user != null) {
                    data.user = this.user;
                }
                if (this.channel != null) {
                    data.channel = this.channel;
                }
                if (this.team != null) {
                    data.team = this.team;
                }
                if (this.provider != null) {
                    data.provider = this.provider;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id.length)
                    writer.writeString(1, this.id);
                if (this.name.length)
                    writer.writeString(2, this.name);
                if (this.user.length)
                    writer.writeString(3, this.user);
                if (this.channel != false)
                    writer.writeBool(4, this.channel);
                if (this.team.length)
                    writer.writeString(5, this.team);
                if (this.provider.length)
                    writer.writeString(6, this.provider);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Channel {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Channel();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.name = reader.readString();
                            break;
                        case 3:
                            message.user = reader.readString();
                            break;
                        case 4:
                            message.channel = reader.readBool();
                            break;
                        case 5:
                            message.team = reader.readString();
                            break;
                        case 6:
                            message.provider = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Channel {
                return Channel.deserialize(bytes);
            }
        }
        export class ChatUser extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                team?: string;
                name?: string;
                displayName?: string;
                bot?: boolean;
                avatar?: string;
                provider?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("team" in data && data.team != undefined) {
                        this.team = data.team;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("displayName" in data && data.displayName != undefined) {
                        this.displayName = data.displayName;
                    }
                    if ("bot" in data && data.bot != undefined) {
                        this.bot = data.bot;
                    }
                    if ("avatar" in data && data.avatar != undefined) {
                        this.avatar = data.avatar;
                    }
                    if ("provider" in data && data.provider != undefined) {
                        this.provider = data.provider;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get team() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set team(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get displayName() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set displayName(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get bot() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set bot(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            get avatar() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set avatar(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            get provider() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }
            set provider(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                id?: string;
                team?: string;
                name?: string;
                displayName?: string;
                bot?: boolean;
                avatar?: string;
                provider?: string;
            }): ChatUser {
                const message = new ChatUser({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.team != null) {
                    message.team = data.team;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.displayName != null) {
                    message.displayName = data.displayName;
                }
                if (data.bot != null) {
                    message.bot = data.bot;
                }
                if (data.avatar != null) {
                    message.avatar = data.avatar;
                }
                if (data.provider != null) {
                    message.provider = data.provider;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    team?: string;
                    name?: string;
                    displayName?: string;
                    bot?: boolean;
                    avatar?: string;
                    provider?: string;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.team != null) {
                    data.team = this.team;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.displayName != null) {
                    data.displayName = this.displayName;
                }
                if (this.bot != null) {
                    data.bot = this.bot;
                }
                if (this.avatar != null) {
                    data.avatar = this.avatar;
                }
                if (this.provider != null) {
                    data.provider = this.provider;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id.length)
                    writer.writeString(1, this.id);
                if (this.team.length)
                    writer.writeString(2, this.team);
                if (this.name.length)
                    writer.writeString(3, this.name);
                if (this.displayName.length)
                    writer.writeString(4, this.displayName);
                if (this.bot != false)
                    writer.writeBool(5, this.bot);
                if (this.avatar.length)
                    writer.writeString(6, this.avatar);
                if (this.provider.length)
                    writer.writeString(7, this.provider);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatUser {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatUser();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.team = reader.readString();
                            break;
                        case 3:
                            message.name = reader.readString();
                            break;
                        case 4:
                            message.displayName = reader.readString();
                            break;
                        case 5:
                            message.bot = reader.readBool();
                            break;
                        case 6:
                            message.avatar = reader.readString();
                            break;
                        case 7:
                            message.provider = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): ChatUser {
                return ChatUser.deserialize(bytes);
            }
        }
        export class Message extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                user?: string;
                channel?: string;
                content?: string;
                timestamp?: string;
                provider?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("user" in data && data.user != undefined) {
                        this.user = data.user;
                    }
                    if ("channel" in data && data.channel != undefined) {
                        this.channel = data.channel;
                    }
                    if ("content" in data && data.content != undefined) {
                        this.content = data.content;
                    }
                    if ("timestamp" in data && data.timestamp != undefined) {
                        this.timestamp = data.timestamp;
                    }
                    if ("provider" in data && data.provider != undefined) {
                        this.provider = data.provider;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get user() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set user(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get channel() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set channel(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get content() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set content(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get timestamp() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set timestamp(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get provider() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set provider(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data: {
                id?: string;
                user?: string;
                channel?: string;
                content?: string;
                timestamp?: string;
                provider?: string;
            }): Message {
                const message = new Message({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.user != null) {
                    message.user = data.user;
                }
                if (data.channel != null) {
                    message.channel = data.channel;
                }
                if (data.content != null) {
                    message.content = data.content;
                }
                if (data.timestamp != null) {
                    message.timestamp = data.timestamp;
                }
                if (data.provider != null) {
                    message.provider = data.provider;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    user?: string;
                    channel?: string;
                    content?: string;
                    timestamp?: string;
                    provider?: string;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.user != null) {
                    data.user = this.user;
                }
                if (this.channel != null) {
                    data.channel = this.channel;
                }
                if (this.content != null) {
                    data.content = this.content;
                }
                if (this.timestamp != null) {
                    data.timestamp = this.timestamp;
                }
                if (this.provider != null) {
                    data.provider = this.provider;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id.length)
                    writer.writeString(1, this.id);
                if (this.user.length)
                    writer.writeString(2, this.user);
                if (this.channel.length)
                    writer.writeString(3, this.channel);
                if (this.content.length)
                    writer.writeString(4, this.content);
                if (this.timestamp.length)
                    writer.writeString(5, this.timestamp);
                if (this.provider.length)
                    writer.writeString(6, this.provider);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.user = reader.readString();
                            break;
                        case 3:
                            message.channel = reader.readString();
                            break;
                        case 4:
                            message.content = reader.readString();
                            break;
                        case 5:
                            message.timestamp = reader.readString();
                            break;
                        case 6:
                            message.provider = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Message {
                return Message.deserialize(bytes);
            }
        }
    }
    export class Packet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            payload?: dependency_1.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
            }
        }
        get payload() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 1) as dependency_1.google.protobuf.Any;
        }
        set payload(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_payload() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            payload?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
        }): Packet {
            const message = new Packet({});
            if (data.payload != null) {
                message.payload = dependency_1.google.protobuf.Any.fromObject(data.payload);
            }
            return message;
        }
        toObject() {
            const data: {
                payload?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.payload != null) {
                data.payload = this.payload.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_payload)
                writer.writeMessage(1, this.payload, () => this.payload.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Packet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Packet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.payload, () => message.payload = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Packet {
            return Packet.deserialize(bytes);
        }
    }
}
