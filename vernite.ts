/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: vernite.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace tutorial {
    export enum Kind {
        UPDATED = 0,
        DELETED = 1
    }
    export class Person extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            id?: number;
            email?: string;
            phones?: Person.PhoneNumber[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("phones" in data && data.phones != undefined) {
                    this.phones = data.phones;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get phones() {
            return pb_1.Message.getRepeatedWrapperField(this, Person.PhoneNumber, 4) as Person.PhoneNumber[];
        }
        set phones(value: Person.PhoneNumber[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            name?: string;
            id?: number;
            email?: string;
            phones?: ReturnType<typeof Person.PhoneNumber.prototype.toObject>[];
        }): Person {
            const message = new Person({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.phones != null) {
                message.phones = data.phones.map(item => Person.PhoneNumber.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                id?: number;
                email?: string;
                phones?: ReturnType<typeof Person.PhoneNumber.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.phones != null) {
                data.phones = this.phones.map((item: Person.PhoneNumber) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.id != 0)
                writer.writeInt32(2, this.id);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (this.phones.length)
                writer.writeRepeatedMessage(4, this.phones, (item: Person.PhoneNumber) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Person {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Person();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readInt32();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.phones, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Person.PhoneNumber.deserialize(reader), Person.PhoneNumber));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Person {
            return Person.deserialize(bytes);
        }
    }
    export namespace Person {
        export enum PhoneType {
            MOBILE = 0,
            HOME = 1,
            WORK = 2
        }
        export class PhoneNumber extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                number?: string;
                type?: Person.PhoneType;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("number" in data && data.number != undefined) {
                        this.number = data.number;
                    }
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                }
            }
            get number() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set number(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get type() {
                return pb_1.Message.getFieldWithDefault(this, 2, Person.PhoneType.MOBILE) as Person.PhoneType;
            }
            set type(value: Person.PhoneType) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                number?: string;
                type?: Person.PhoneType;
            }): PhoneNumber {
                const message = new PhoneNumber({});
                if (data.number != null) {
                    message.number = data.number;
                }
                if (data.type != null) {
                    message.type = data.type;
                }
                return message;
            }
            toObject() {
                const data: {
                    number?: string;
                    type?: Person.PhoneType;
                } = {};
                if (this.number != null) {
                    data.number = this.number;
                }
                if (this.type != null) {
                    data.type = this.type;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.number.length)
                    writer.writeString(1, this.number);
                if (this.type != Person.PhoneType.MOBILE)
                    writer.writeEnum(2, this.type);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PhoneNumber {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PhoneNumber();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.number = reader.readString();
                            break;
                        case 2:
                            message.type = reader.readEnum();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): PhoneNumber {
                return PhoneNumber.deserialize(bytes);
            }
        }
    }
    export class AddressBook extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            people?: Person[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("people" in data && data.people != undefined) {
                    this.people = data.people;
                }
            }
        }
        get people() {
            return pb_1.Message.getRepeatedWrapperField(this, Person, 1) as Person[];
        }
        set people(value: Person[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            people?: ReturnType<typeof Person.prototype.toObject>[];
        }): AddressBook {
            const message = new AddressBook({});
            if (data.people != null) {
                message.people = data.people.map(item => Person.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                people?: ReturnType<typeof Person.prototype.toObject>[];
            } = {};
            if (this.people != null) {
                data.people = this.people.map((item: Person) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.people.length)
                writer.writeRepeatedMessage(1, this.people, (item: Person) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddressBook {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddressBook();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.people, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Person.deserialize(reader), Person));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): AddressBook {
            return AddressBook.deserialize(bytes);
        }
    }
    export class Author extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            role?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            role?: string;
        }): Author {
            const message = new Author({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                role?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.role.length)
                writer.writeString(2, this.role);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Author {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Author();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.role = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Author {
            return Author.deserialize(bytes);
        }
    }
    export class Change extends pb_1.Message {
        #one_of_decls: number[][] = [[4, 5]];
        constructor(data?: any[] | ({
            kind?: Kind;
            patch?: string;
            tags?: string[];
            author?: Author;
        } & (({
            name?: string;
            id?: never;
        } | {
            name?: never;
            id?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("patch" in data && data.patch != undefined) {
                    this.patch = data.patch;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("author" in data && data.author != undefined) {
                    this.author = data.author;
                }
            }
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 1, Kind.UPDATED) as Kind;
        }
        set kind(value: Kind) {
            pb_1.Message.setField(this, 1, value);
        }
        get patch() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set patch(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get author() {
            return pb_1.Message.getWrapperField(this, Author, 6) as Author;
        }
        set author(value: Author) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_author() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get name_or_id() {
            const cases: {
                [index: number]: "none" | "name" | "id";
            } = {
                0: "none",
                4: "name",
                5: "id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4, 5])];
        }
        static fromObject(data: {
            kind?: Kind;
            patch?: string;
            tags?: string[];
            name?: string;
            id?: string;
            author?: ReturnType<typeof Author.prototype.toObject>;
        }): Change {
            const message = new Change({});
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (data.patch != null) {
                message.patch = data.patch;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.author != null) {
                message.author = Author.fromObject(data.author);
            }
            return message;
        }
        toObject() {
            const data: {
                kind?: Kind;
                patch?: string;
                tags?: string[];
                name?: string;
                id?: string;
                author?: ReturnType<typeof Author.prototype.toObject>;
            } = {};
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.patch != null) {
                data.patch = this.patch;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.author != null) {
                data.author = this.author.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.kind != Kind.UPDATED)
                writer.writeEnum(1, this.kind);
            if (this.patch.length)
                writer.writeString(2, this.patch);
            if (this.tags.length)
                writer.writeRepeatedString(3, this.tags);
            if (this.has_name)
                writer.writeString(4, this.name);
            if (this.has_id)
                writer.writeString(5, this.id);
            if (this.has_author)
                writer.writeMessage(6, this.author, () => this.author.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Change {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Change();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.kind = reader.readEnum();
                        break;
                    case 2:
                        message.patch = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.name = reader.readString();
                        break;
                    case 5:
                        message.id = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.author, () => message.author = Author.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): Change {
            return Change.deserialize(bytes);
        }
    }
}
